<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[java异常抛出实例]]></title>
      <url>/2024/07/11/java%E5%BC%82%E5%B8%B8%E6%8A%9B%E5%87%BA%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>自定义异常</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class my_exception extends Exception &#123;</span><br><span class="line">    public void pick()&#123;</span><br><span class="line">    System.out.println(&quot;Error: 越界&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>抛出异常类及方法</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class pointjd &#123;</span><br><span class="line">    private int x=0;</span><br><span class="line">    public void move(char s)throws my_exception&#123;</span><br><span class="line">        if(s == &#x27;a&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            x-=1;</span><br><span class="line">            if(x&lt;=-5)</span><br><span class="line">                throw new my_exception();</span><br><span class="line">        &#125;</span><br><span class="line">        else if(s ==&#x27;d&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            x+=1;</span><br><span class="line">            if(x&gt;=5)</span><br><span class="line">                throw new my_exception();</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">            System.out.println(&quot;warning!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>主函数</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//TIP To &lt;b&gt;Run&lt;/b&gt; code, press &lt;shortcut actionId=&quot;Run&quot;/&gt; or</span><br><span class="line">// click the &lt;icon src=&quot;AllIcons.Actions.Execute&quot;/&gt; icon in the gutter.</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    pointjd p = new pointjd();</span><br><span class="line">    Scanner scanner = new Scanner(System.in);</span><br><span class="line">    for(int i= 0 ;i&lt;9;i++)&#123;</span><br><span class="line">            char mv;</span><br><span class="line">            String MV;</span><br><span class="line">            MV = scanner.next();</span><br><span class="line">            mv=MV.charAt(0);</span><br><span class="line">            try&#123;</span><br><span class="line">                p.move(mv);</span><br><span class="line">            &#125;</span><br><span class="line">            catch(my_exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                e.pick();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    System.out.println(&quot;over&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<ol>
<li><strong>创建自定义异常类</strong>：<ul>
<li>声明一个继承自Exception类或RuntimeException类的类。</li>
<li>根据需要添加构造方法和其他方法。例如，你可以添加一个带有错误消息的构造方法，以便在抛出异常时提供有关异常的详细信息。</li>
</ul>
</li>
<li><strong>在方法适当的位置生成自定义异常的实例，并用throw语句抛出</strong>：<ul>
<li>当你的代码遇到特定的错误情况时，你可以创建一个自定义异常类的实例，并使用throw语句将其抛出。这将导致程序的控制流跳转到最近的catch块（如果存在的话）。</li>
</ul>
</li>
<li><strong>在方法的声明部分用throws语句声明可能抛出的异常</strong>：<ul>
<li>如果你的方法可能会抛出异常（无论是自定义异常还是预定义异常），你都应该在方法的声明部分使用throws语句来声明它。这将告诉调用该方法的代码需要处理这个异常，或者它也可以继续向上抛出这个异常。</li>
</ul>
</li>
<li><strong>捕获和处理异常</strong>：<ul>
<li>在你的代码中，你可以使用try-catch块来捕获和处理异常。在try块中，你放置可能会抛出异常的代码。在catch块中，你处理这些异常。你可以根据异常的类型来决定如何处理它们。例如，如果你捕获到的是你的自定义异常，你可以根据异常中包含的信息来采取适当的行动。</li>
</ul>
</li>
</ol>
<h2 id="异常的解决方式"><a href="#异常的解决方式" class="headerlink" title="异常的解决方式"></a>异常的解决方式</h2><h3 id="异常声明throws"><a href="#异常声明throws" class="headerlink" title="异常声明throws"></a>异常声明throws</h3><p>​    当方法中抛出编译时异常，用户不想处理该异常，此时就可以借助throws将异常抛给方法的调用者来处理。即当前方法不处理异常，提醒方法的调用者处理异常。</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数列表) throws 异常类型1，异常类型2...&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void divide(int a, int b) throws ArithmeticException &#123;</span><br><span class="line">        if (b == 0) &#123;</span><br><span class="line">            throw new ArithmeticException(&quot;除数不能为0&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        int result = a / b;</span><br><span class="line">        System.out.println(&quot;结果：&quot; + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol>
<li><p>throws必须跟在方法的参数列表之后</p>
</li>
<li><p>声明的异常必须是 Exception 或者 Exception 的子类</p>
</li>
<li><p>方法内部如果抛出了多个异常，throws之后必须跟多个异常类型，之间用逗号隔开，如果抛出多个异常类型具有父子关系，直接声明父类即可。</p>
</li>
<li><p>调用声明抛出异常的方法时，调用者必须对该异常进行处理，或者继续使用throws抛出</p>
</li>
</ol>
<h3 id="try-catch-finally语句"><a href="#try-catch-finally语句" class="headerlink" title="try - catch - finally语句"></a>try - catch - finally语句</h3><p>异常可以通过try-catch-finally语句块来进行处理。由于throws对异常并没有真正处理，而是将异常报告给抛出异常方法的调用者，由调用者处理。如果真正要对异常进行处理，就需要try-catch</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    // 可能抛出异常的代码</span><br><span class="line">&#125; catch (ExceptionType1 e1) &#123;</span><br><span class="line">    // 处理异常类型1的情况</span><br><span class="line">&#125; catch (ExceptionType2 e2) &#123;</span><br><span class="line">    // 处理异常类型2的情况</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">    // 可选的finally语句块，用于执行清理操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>finally语句块是可选的，用于执行清理操作，无论是否发生异常都会执行。finally语句块通常用于释放资源或执行必要的收尾工作，例如关闭文件或数据库连接。</p>
<ol>
<li>try块内抛出异常位置之后的代码将不会被执行</li>
<li>如果抛出异常类型与catch时异常类型不匹配，即异常不会被成功捕获，也就不会被处理，继续往外抛，直到JVM收到后中断程序—-异常是按照类型来捕获的**</li>
<li>try中可能会抛出多个不同的异常对象，则必须用多个catch来捕获—-即多种异常，多次捕获</li>
<li>如果多个异常的处理方式是完全相同，我们可以使用“ | ”隔开</li>
<li>如果异常之间具有父子关系，一定是子类异常在前catch，父类异常在后catch，否则语法错误</li>
</ol>
<h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><h3 id="检查性异常："><a href="#检查性异常：" class="headerlink" title="检查性异常："></a>检查性异常：</h3><p>最具代表的检查性异常是用户错误或问题引起的异常，这些异常在编译时强制要求程序员处理。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</p>
<h3 id="运行时异常（非检查性异常）："><a href="#运行时异常（非检查性异常）：" class="headerlink" title="运行时异常（非检查性异常）："></a>运行时异常（非检查性异常）：</h3><p>这些异常在编译时不强制要求处理，通常是由程序中的错误引起的，例如 NullPointerException、ArrayIndexOutOfBoundsException 等，这类异常可以选择处理，但并非强制要求</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
