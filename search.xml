<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Android虚拟机]]></title>
      <url>/2024/11/28/Android%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      <content type="html"><![CDATA[<h1 id="1-Dalvik-虚拟机"><a href="#1-Dalvik-虚拟机" class="headerlink" title="1. Dalvik 虚拟机"></a>1. Dalvik 虚拟机</h1><h2 id="1-1-Dalvik-虚拟机概述"><a href="#1-1-Dalvik-虚拟机概述" class="headerlink" title="1.1 Dalvik 虚拟机概述"></a>1.1 Dalvik 虚拟机概述</h2><p>Dalvik 虚拟机 (Dalvik Virtual Machine ), 简称 <strong>Dalvik VM</strong> 或者 <strong>DVM</strong>。DVM 是 Google专门为Android平台开发的虚拟机，它运行在Android运行时库中。每一个应用程序对应有一个单独的Dalvik虚拟机实例。</p>
<p>DVM 作为 Android 平台至关重要的中间件，它的输入是经过<strong>dx工具</strong>打包好的<strong>Dex文件</strong>，输出是程序执行结果。dx 工具解析 .class文件，合并多个 .class文件，转换为<strong>基于寄存器的字节码</strong>，并优化字节码，最终生成 Dex文件。</p>
<p>DVM 在 API 上和 Java API 是兼容的。编写好的Java程序可以直接用PC上的Java编译器编译为 .class 文件，之后，需要使用 Dalvik VM提供的dx工具对其进行转换。生成的 Dex文件将作为 DVM 的输入。DVM 启动并初始化后，Dex文件将被映射到内存区，解释器开始将 Dex文件中的每一条字节码解释为本地代码并运行。解释器的工作流程和真实CPU 的工作原理非常相像，都包括取指、解码以及执行。具体的实现原理较为简单，以一个循环来完成一条字节码的解释工作。Dalvik 解释器从内存中取得字节码，并对字节码进行解码(获取字节码号)，之后跳转到对应的代码段执行。无论是C语言编写的解释器还是汇编语言编写的解释器，每一条字节码都有一段与之等价的最终执行。如果有JIT的支持，JIT将编译热代码，并将编译后的 Native Code 安装至内存区。再次执行时，解释器将跳转至相应Native Code 执行，这将大幅度提高执行速度。</p>
<p>所有 Android应用程序都运行在 DVM之上，如果 Android 应用程序需要调用核心库中的库函数，DVM 将调用本地接口(Native Interface)并执行核心库中的函数。在 DVM 之上运行的程序或应用是跨平台的，但 DVM 是和操作系统及硬件相关的。其依赖操作系统掌管的一些功能，如线程调度、内存管理等。和操作系统与底层硬件相关一样，DVM 的解释器和JIT都因硬件的不同而有不同的实现，如ARM系列、MIPS以及Intel X86等平台都对应有不同的实现。</p>
<h2 id="1-2-DVM-与-JVM-的区别："><a href="#1-2-DVM-与-JVM-的区别：" class="headerlink" title="1.2 DVM 与 JVM 的区别："></a>1.2 DVM 与 JVM 的区别：</h2><p>DVM 并不是按照 JVM 的规范进行实现的，Dalvik 虚拟机与Java 虚拟机的类文件格式和执行的指令集是不一样的。</p>
<h3 id="1-2-1-class-文件和-dex-文件"><a href="#1-2-1-class-文件和-dex-文件" class="headerlink" title="1.2.1 .class 文件和 .dex 文件"></a>1.2.1 .class 文件和 .dex 文件</h3><p>Dalvik 虚拟机使用的是 .dex（Dalvik Executable）格式的类文件，而 Java 虚拟机使用的是 .class 格式的类文件。</p>
<p>一个 .dex 文件可以包含若干个类，而一个 .clas s文件只包括一个类。</p>
<p>由于一个dex文件可以包含若干个类，因此它就可以将各个类中重复的字符串和其它常数只保存一次，从而节省了空间。一般来说，包含有相同类的未压缩dex文件稍小于一个已经压缩的jar文件。</p>
<h3 id="1-2-2-JVM是基于栈的虚拟机："><a href="#1-2-2-JVM是基于栈的虚拟机：" class="headerlink" title="1.2.2 JVM是基于栈的虚拟机："></a>1.2.2 JVM是基于栈的虚拟机：</h3><p>基于栈的虚拟机在复制数据时而使用的大量的出入栈指令，需要更多的指令，多占用CPU时间。但同时指令更紧凑、更简洁。</p>
<h3 id="1-2-3DVM是基于寄存器的虚拟机："><a href="#1-2-3DVM是基于寄存器的虚拟机：" class="headerlink" title="1.2.3DVM是基于寄存器的虚拟机："></a>1.2.3DVM是基于寄存器的虚拟机：</h3><p>寄存器是CPU的组成部分，它们可用来暂存指令、数据等。</p>
<p>基于寄存器的虚拟机中没有操作数栈，但是有很多虚拟寄存器，其实和操作数栈相同，这些寄存器也存放在运行时栈中，本质上就是一个数组。</p>
<p>与 JVM 相似，在 DVM 中每个线程都有自己的PC和调用栈，方法调用的活动记录以帧为单位保存在调用栈上。由于显示指定了操作数，所以基于寄存器的指令会比基于栈的指令要大，需要更多的指令空间，数据缓冲更易失效。但是由于指令数量的减少，总的代码数不会增加多少。</p>
<h2 id="1-3-Dalvik虚拟机的特性"><a href="#1-3-Dalvik虚拟机的特性" class="headerlink" title="1.3 Dalvik虚拟机的特性"></a>1.3 Dalvik虚拟机的特性</h2><p>DVM 非常适合在移动终端上使用，相对于在桌面系统和服务器系统运行的虚拟机而言，它不需要很快的CPU速度和大量的内存空间。</p>
<p>Android 是由Google公司基于移动设备而开发的嵌入式系统，具有优良的性能表现以及较低的硬件配置需求，因此使其迅速成为目前移动终端之上的主流操作系统。这种优势的体现主要得益于Google对作为Android系统基石的 DVM 所做出的大量优化。实际上，DVM 并不是一个标准的Java虚拟机，因为它不符合Java虚拟机设计规范。DVM 是一个针对嵌入式系统中低速 CPU和内存受限等特点，经过专门设计优化而实现的 Java语言虚拟机。</p>
<h2 id="1-4-Dalvik-虚拟机的功能"><a href="#1-4-Dalvik-虚拟机的功能" class="headerlink" title="1.4 Dalvik 虚拟机的功能"></a>1.4 Dalvik 虚拟机的功能</h2><p>DVM 主要完成对象生命周期的管理、堆栈的管理、线程管理、安全和异常的管理以及垃圾回收等重要功能。</p>
<p>在 DVM 设计的过程中充分利用了Linux进程管理的特点，使其可以同时运行多个进程，这就使得在 Android系统上可以同时运行多个应用程序，每一个应用程序都对应后台一个独立的虚拟机进程。DVM 考虑到运行环境资源相对紧张的特点，对线程管理、类加载、内存管理、本地接口、反射机制、解释器、即时编译等主要功能模块做了相应的优化及创新。</p>
<p>具体功能如下：</p>
<ol>
<li><code>进程管理</code>：进程隔离和线程管理，<strong>每一个 Android应用在底层都会对应一个独立的Dalvik 虚拟机实例</strong>，所有的Android 应用的线程都对应一个 Linux线程，进程管理依赖于Zygote机制实现。</li>
<li><code>Zygote 线程管理</code>：每一个 Android应用都运行在一个 Dalvik 虚拟机实例里，<strong>而每一个虚拟机实例都是一个独立的进程空间</strong>，这样做的优点是最大程度地保护了<strong>应用的安全和独立运行</strong>。Zygote 进程是在系统启动时产生的，它会完成虚拟机的初始化、库的加载、预置类库的加载和初始化等操作，而在系统需要一个新的虚拟机实例时，<strong>Zygote通过复制自身，最快速地提供一个虚拟机实例</strong>。另外，对于一些只读的系统库，所有虚拟机实例都和Zygote共享一块内存区域，极大地节省了内存开销。</li>
<li><code>内存管理</code>：分配系统启动初始化和应用程序运行时需要的内存资源。DVM 内存管理分为<strong>内存分配</strong>和<strong>垃圾回收</strong>。内存分配的底层依赖是基于 Doug Lea 编写的 dlmalloc 内存分配器，在 Heap上完成，按照分配规则，每分配一个内存区域经过数次尝试。如果分配不成功，就启动垃圾收集按照相应策略进行垃圾收集。DVM 在垃圾回收时使用 <strong>Mark-Sweep 算法</strong>。</li>
<li><code>本地接口</code>：让既有代码继续发挥作用。在 Java代码中调用其他代码的接口。<strong>JNI</strong> 是Java Native Interface的缩写，即<strong>Java本地调用</strong>。从Java1.1开始，JNI 标准成为 Java平台的一部分，它允许 Java 代码和其他语言写的代码进行交互。JNI一开始是为了本地已编译语言，尤其是C和C++而设计的，但是它并不妨碍使用 其他语言，只要调用约定受支持就可以了。Android系统的 DVM 实现了这套接口，供 DVM 的Java应用与本地代码实现互相调用。</li>
<li><code>注重处理速度</code>：和本地代码(C&#x2F;C++等)相比，Java代码的执行速度相对慢一些。如果对某段程序的执行速度有较高的要求，建议使用C&#x2F;C++编写代码。而后在Java中通过JNI调用基于C&#x2F;C++编写的部分，常常能够获得更快的运行速度。例如，图形处理等需要大量计算的情况下通常会采用该机制。</li>
<li><code>直接进行硬件控制</code>：为了更好地控制硬件，硬件控制代码通常使用C语言编写。而后借助JNI将其与Java层连接起来，从而实现对硬件的控制。Dalvik 虚拟机使用一些本地代码编写的已编译的代码库与硬件、操作系统直接进行交互。</li>
<li><code>反射机制</code>：能动态查看、调用、更改任意类中的方法和属性，并能根据自身行为的状态和结果，调整或修改应用所描述行为的状态和相关的语义。反射机制是 DVM 中的核心机制之一，也算作一类工具，合理地使用反射机制能使Java代码变得更加简洁、灵活。同时，反射机制是 Java被当作准动态语言的一个关键性质。反射机制允许程序在运行的过程中通过反射机制的 API取得任何一个已知名称的类的内部信息，包括其中的描述符、超类，也包括属性和方法等所有信息，并且可以在程序运行时改变属性的相关内容或调用其内部的方法。反射机制在实现其功能时首先通过上层应用API运用JNI本地调用机制调用本地方法集中的函数，再向下层调用 DVM 中的内部函数，最后将结果逐层返回到最上层的应用。</li>
<li><code>即时编译</code>：将反复执行的热代码编译成本地码，降低解释器压力。JIT 技术是将字节码编译成本地代码执行，当某一个方法第一次被调用时，JIT 编译器将对虚拟机方法表所指向的字节码进行编译，编译后表中的指针将指向编译生成的机器码，如果程序再次执行该方法时，将执行经过编译的代码，提高了执行速度。JIT(Just-In-Time),中文含义为即时编译，又称为动态编译，执行时动态地编译程序，以缓解解释器的低效工作。JIT混合了两种技术，解释器解释时，编译部分程序，并在下次直接执行该编译后的源程序。对于Java这类语言来说，不论是解释器还是JIT模块，都是在中间代码基础上做文章。</li>
</ol>
<p>虚拟机中最主要的是解释器，负责解释执行中间代码。虽有跨平台的优势，但同时也带来了运行效率低的直观感受。究其原因，是因为其执行原理是一句一句翻译字节码。比如，字节码中出现循环，根据解释器的原理，它需要重复地解释并执行这一组程序。这使得纯粹基于解释器运行的程序效率十分低下，造成了浪费。JIT是解决这个缺陷的一种有效手段。通过将字节码编译为Native Code,让解释器不再重复执行这些热点代码片段。而且，相比于解释器，JIT编译器可以更高效地利用CPU和寄存器。同时在编译的过程中，可以进行部分低级代码优化，比如常数传播、取消范围检查、复制传播等。尽可能地生成媲美编译器编译的二进制代码。之后执行编译生成的Native Code,从而达到加速执行应用程序的目的。</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.example.aotdemo;</span><br><span class="line"></span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        TextView textView = findViewById(R.id.text_view);</span><br><span class="line">        textView.setText(&quot;Hello, AOT World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="2-ART虚拟机"><a href="#2-ART虚拟机" class="headerlink" title="2. ART虚拟机"></a>2. ART虚拟机</h1><p>ART（Android Runtime）虚拟机是 Android4.4 发布的，用来替换 Dalvik 虚拟机，Android4.4 默认采用的还是DVM，系统会提供一个选项来开启ART。在 Android 5.0版本中默认采用了ART，DVM从此退出历史舞台。</p>
<h2 id="2-1-ART-与-DVM-的区别"><a href="#2-1-ART-与-DVM-的区别" class="headerlink" title="2.1 ART 与 DVM 的区别"></a>2.1 ART 与 DVM 的区别</h2><h3 id="1-编译方式"><a href="#1-编译方式" class="headerlink" title="1. 编译方式"></a>1. 编译方式</h3><p>DVM 中的应用每次运行时，字节码都需要通过JIT编译器编译为机器码，这会使得应用程序的运行效率降低。而在ART 中，<strong>ART虚拟机执行的是本地机器码</strong>。</p>
<p>系统在<strong>安装应用程序时</strong>会进行一次 **AOT(ahead of time compilation, 预先编译)**，在安装时，ART 使用设备自带的 <strong>dex2oat</strong> 工具来编译应用，dex 中的字节码将被编译成本地机器码，这样应用程序每次运行时就不需要执行编译了，运行效率会大大提升，设备的耗电量也会降低。</p>
<p>采用 AOT 也会有缺点，主要有两个：</p>
<ol>
<li>AOT 会使得<strong>应用程序的安装时间变长</strong>，尤其是一些复杂的应用。</li>
<li>字节码预先编译成机器码，<strong>机器码需要的存储空间会多一些</strong>。</li>
</ol>
<p>为了解决上面的缺点， Android7.0版本中的ART 加入了即时编译器 JIT, 作为AOT 的一个补充：</p>
<ol>
<li>最初安装应用时不进行任何 AOT 编译（安装又快了），运行过程中解释执行，对经常执行的方法进行JIT，经过 JIT 编译的方法将会记录到<strong>Profile配置文件</strong>中。</li>
<li>当设备闲置和充电时，编译守护进程会运行，根据Profile文件对常用代码进行 AOT 编译。待下次运行时直接使用。</li>
</ol>
<h3 id="2-空间划分"><a href="#2-空间划分" class="headerlink" title="2. 空间划分"></a>2. 空间划分</h3><p>ART在运行时堆空间划分上与DVM不同。</p>
<h3 id="3-性能优化"><a href="#3-性能优化" class="headerlink" title="3. 性能优化"></a>3. 性能优化</h3><p>ART在运行时对垃圾回收机制进行了改进，例如更频繁地执行并垃圾收集，将GC暂停的次数由2次减少到1次。</p>
<h3 id="4-支持架构"><a href="#4-支持架构" class="headerlink" title="4. 支持架构"></a>4. 支持架构</h3><p>DVM是为32位CPU设计的，而ART支持64位并兼容32位的CPU。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Activity启动模式]]></title>
      <url>/2024/10/19/Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="Activity启动模式："><a href="#Activity启动模式：" class="headerlink" title="Activity启动模式："></a>Activity启动模式：</h2><h5 id="1-默认启动模式standard："><a href="#1-默认启动模式standard：" class="headerlink" title="1.默认启动模式standard："></a>1.默认启动模式standard：</h5><p>  该模式可以被设定，不在manifest设定时候，Activity的默认模式就是standard。在该模式下，启动的Activity会依照启动顺序被依次压入Task中：</p>
<p><img src="/./Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/2f936ad41bc09220d039f923dd2ad4d9.png" alt="2f936ad41bc09220d039f923dd2ad4d9"></p>
<h5 id="2-栈顶复用模式singleTop："><a href="#2-栈顶复用模式singleTop：" class="headerlink" title="2.栈顶复用模式singleTop："></a>2.栈顶复用模式singleTop：</h5><p>  在该模式下，如果栈顶Activity为我们要新建的Activity（目标Activity），那么就不会重复创建新的Activity。</p>
<p>例：<img src="/./Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/b6706aedf5cad720c966afefd2eab41d.png" alt="b6706aedf5cad720c966afefd2eab41d"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;zy.pers.activitytext&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:taskAffinity</span>=<span class="string">&quot;gf.zy&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/AppTheme&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.TwoActivity&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">            <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTop&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;ONETEXT_TWOACTIVITY&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.ThreeActivity&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;ONETEXT_THREEACTIVITY&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.DEFAULT&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是第一个应用OneText的Mainfest结构，里面创建了三个Activity，我们把第二个Activity的模式设置为singleTop。</p>
<p>每个Activity界面都只有一个显示当前界面名称的TextView和一个用来组跳转的Button，所以应用OneText的功能就是从活动1跳转到活动2，活动2继续跳转活动2</p>
<h5 id="3-栈内复用模式singleTask："><a href="#3-栈内复用模式singleTask：" class="headerlink" title="3.栈内复用模式singleTask："></a>3.栈内复用模式singleTask：</h5><p>  与singleTop模式相似，只不过singleTop模式是只是针对栈顶的元素，而singleTask模式下，如果task栈内存在目标Activity实例，则：</p>
<ol>
<li>将task内的对应Activity实例之上的所有Activity弹出栈。</li>
<li>将对应Activity置于栈顶，获得焦点。</li>
</ol>
<p><img src="/./Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/dcbcdc562715543f5b662f0aabe85a96.png" alt="dcbcdc562715543f5b662f0aabe85a96"></p>
<p>4.全局唯一模式singleInstance：</p>
<p>  在该模式下，我们会为目标Activity分配一个新的affinity，并创建一个新的Task栈，将目标Activity放入新的Task，并让目标Activity获得焦点。<strong>新的Task有且只有这一个Activity实例。    如果已经创建过目标Activity实例，则不会创建新的Task，而是将以前创建过的Activity唤醒（对应Task设为Foreground状态）</strong></p>
<p><img src="/./Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/cfc84f433fbcb2b3f430027ff92b8795.png" alt="cfc84f433fbcb2b3f430027ff92b8795"></p>
<p><img src="/./Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/3966c3f42254480a29ed8419b0d34496.png" alt="3966c3f42254480a29ed8419b0d34496"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[smali入门语法]]></title>
      <url>/2024/10/14/smali%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="Smali是什么"><a href="#Smali是什么" class="headerlink" title="Smali是什么"></a>Smali是什么</h1><p>Smali是Android虚拟机的反汇编语言。Android虚拟机的可执行文件并不是普通的class文件，而是再重新整合打包后生成的dex文件。dex文件反编译之后就是Smali代码，所以说，Smali语言是Android虚拟机的反汇编语言。<br>动态调试APK，通常静态分析APK是不够的，如果需要彻底分析APK的执行逻辑，需要通过动态调试来进行。<br>修改APK运行逻辑，通过修改Smali代码，再重新编译打包成新的APK，是Android逆向的基本操作。<br>Smali基本语法</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table>
<thead>
<tr>
<th>Smali(方法类型)</th>
<th>代码</th>
<th>Java</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>V</td>
<td>return-void</td>
<td>void</td>
<td>只能用于返回值类型</td>
</tr>
<tr>
<td>Z</td>
<td>const&#x2F;4 v0,0x1</td>
<td>boolean</td>
<td>布尔值类型，判断逻辑</td>
</tr>
<tr>
<td>Ljava&#x2F;lang&#x2F;String;</td>
<td>const-string v0,”字符串”</td>
<td>String</td>
<td>字符串类型</td>
</tr>
<tr>
<td>I</td>
<td>const&#x2F;4 v0,0x1</td>
<td>int</td>
<td>整数类型</td>
</tr>
<tr>
<td><em><strong>*Lpackage&#x2F;name;*</strong></em></td>
<td>Lpackage&#x2F;name;</td>
<td>对象类型</td>
<td>L表示这是一个对象类型，package表示该对象所在的包，; 表示对象名称的结束</td>
</tr>
<tr>
<td>S</td>
<td>const&#x2F;16 v0, 0x64</td>
<td>short</td>
<td>短整数类型</td>
</tr>
<tr>
<td>J</td>
<td>const-wide&#x2F;32 v0, 0x186a0</td>
<td>long</td>
<td>长整数类型</td>
</tr>
<tr>
<td>F</td>
<td>const&#x2F;high16 v0, 0x42c80000</td>
<td>float</td>
<td>浮点数类型</td>
</tr>
<tr>
<td>D</td>
<td>const-wide&#x2F;high16 v0, 0x4059000000000000L</td>
<td>double</td>
<td>双浮点数类型</td>
</tr>
<tr>
<td>C</td>
<td>const&#x2F;16 v0, 0x61</td>
<td>char</td>
<td>字符类型</td>
</tr>
<tr>
<td>B</td>
<td>const&#x2F;4 v0, 0x1</td>
<td>byte</td>
<td>字节类型</td>
</tr>
<tr>
<td>[类型</td>
<td>[类型</td>
<td>数组</td>
<td>[l表示一个int型数据，[Ljava&#x2F;lang&#x2F;String 表示一个String的对象数组</td>
</tr>
</tbody></table>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="语法关键词"><a href="#语法关键词" class="headerlink" title="语法关键词"></a>语法关键词</h3><p>.class</p>
<p>定义java类名</p>
<p>.super</p>
<p>定义父类名</p>
<p>.source</p>
<p>定义Java源文件名</p>
<p>.filed</p>
<p>定义字段</p>
<p>.method</p>
<p>定义方法开始</p>
<p>.end method</p>
<p>定义方法结束</p>
<p>.annotation</p>
<p>定义注解开始</p>
<p>.end annotation</p>
<p>定义注解结束</p>
<p>.implements</p>
<p>定义接口指令</p>
<p>.local</p>
<p>指定了方法内局部变量的个数</p>
<p>.registers</p>
<p>指定方法内使用寄存器的总数</p>
<p>.prologue</p>
<p>表示方法中代码的开始处</p>
<p>.line</p>
<p>表示java源文件中指定行</p>
<p>.paramter</p>
<p>指定了方法的参数</p>
<p>.param</p>
<p>和.paramter含义一致但是表达格式不同</p>
<p>L表示这是一个对象类型，package表示该对象所在的包，; 表示对象名称的结束</p>
<h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>Java中变量都是存放在内存中的，Android为了提高性能，变量都是存放在寄存器中的，寄存器为32位，可以支持任何类型。</p>
<p>寄存器分为如下两类：<br>1、本地寄存器<br>用v开头数字结尾的符号来表示，v0, v1, v2,…<br>2、参数寄存器<br>用p开头数字结尾的符号来表示，p0,p1,p2,…<br>注意：<br>在非static方法中，p0代指this，p1为方法的第一个参数。<br>在static方法中，p0为方法的第一个参数。</p>
<p>Smali代码示例</p>
<p>const&#x2F;4 v0, 0x1 &#x2F;&#x2F;把值0x1存到v0本地寄存器</p>
<p>iput-boolean v0,p0,Lcom&#x2F;aaa;-&gt;IsRegisterd:Z &#x2F;&#x2F;把v0中的值赋给com.aaa.IsRegistered，p0代表this，相当于this.Isregistered&#x3D;true</p>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h3><p>成员变量定义格式为：<br>.field public&#x2F;private [static][final] varName:&lt;类型&gt;</p>
<p>获取指令<br>iget, sget, iget-boolean, sget-boolean, iget-object, sget-object</p>
<p>操作指令<br>iput, sput, iput-boolean, sput-boolean, iput-object, sput-object<br>array的操作是aget和aput</p>
<p>指令解析<br>sget-object v0,Lcom&#x2F;aaa;-&gt;ID:Ljava&#x2F;lang&#x2F;String;<br>获取ID这个String类型的成员变量并放到v0这个寄存器中<br>iget-object v0,p0,Lcom&#x2F;aaa;-&gt;view:Lcom&#x2F;aaa&#x2F;view;<br>iget-object比sget-object多一个参数p0，这个参数代表变量所在类的实例。这里p0就是this</p>
<h3 id="Smali代码示例1："><a href="#Smali代码示例1：" class="headerlink" title="Smali代码示例1："></a>Smali代码示例1：</h3><p>const&#x2F;4 v3, 0x0</p>
<p>sput-object v3, Lcom&#x2F;aaa;-&gt;timer:Lcom&#x2F;aaa&#x2F;timer;</p>
<p>相当于java代码：this.timer &#x3D; null;</p>
<p>Smali代码示例2：</p>
<p>.local v0, args:Landroid&#x2F;os&#x2F;Message;</p>
<p>const&#x2F;4 v1, 0x12</p>
<p>iput v1,v0,Landroid&#x2F;os&#x2F;Message;-&gt;what:I</p>
<p>相当于java代码：args.what &#x3D; 18;<br>其中args为Message的实例</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数定义格式为：<br>.method public&#x2F;private [static][final] methodName()&lt;类型&gt;<br>.end method</p>
<p>Smali代码示例</p>
<p>.method private ifRegistered()Z</p>
<pre><code>.locals 2            // 本地寄存器的个数

.prologue

const/4 v0, 0x1      //v0赋值为1

if-eqz v0, :cond_0   //判断v0是否等于0，等于0则跳到cond_0执行

const/4 v1, 0x1      //符合条件分支

:goto_0              //标签

return v1            //返回v1的值

:cond_0              //标签

const/4 v1, 0x0      //cond_0分支

goto :goto_0         //跳到goto_0执行
</code></pre>
<p>.end method</p>
<p>函数分为两类：direct method和virtual method<br>direct method就是private方法，virtual method就是指其余的方法。</p>
<p>调用指令：<br>invoke-direct<br>invoke-virtual<br>invoke-static<br>invoke-super<br>invoke-interface</p>
<p>调用格式：<br>invoke-指令类型 {参数1, 参数2,…}, L类名;-&gt;方法名<br>如果不是是静态方法，参数1代表调用该方法的实例。</p>
<p>Smali代码示例：</p>
<p>const-string v0, “NDKLIB”</p>
<p>invoke-static {v0}, Ljava&#x2F;lang&#x2F;System;-&gt;loadLibrary(Ljava&#x2F;lang&#x2F;String;)V</p>
<p>相当于java代码：System.loadLibrary(“NDKLIB”)</p>
<p>函数返回结果<br>Smali需要用指令move-result或move-result-object来保存函数返回的结果</p>
<p>Smali代码示例：</p>
<p>const-string v0, “Eric”</p>
<p>invoke-static {v0}, Lcmb&#x2F;pbi;-&gt;t(Ljava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;String;</p>
<p>move-result-object v2</p>
<p>表示将方法t返回的String对象保存到v2中。</p>
<h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><p>private static int sum(int a, int b) {</p>
<pre><code>    return a+b;
</code></pre>
<p>}</p>
<p>使用编译后是这样</p>
<p>.method private static sum(II)I</p>
<pre><code>.locals 4   表示需要申请4个本地寄存器

.parameter

.parameter 这里表示有两个参数

.prologue

.line 27

move v0, p0

.local v0, a:I

move v1, p1

.local v1, b:I

move v2, v0

move v3, v1

add-int/2addr v2, v3

move v0, v2

.end local v0           a:I

return v0
</code></pre>
<p>.end method</p>
<p>从上面可以看到函数声明使用.method开始 .end method结束，java中的关键词private,static 等都可以使用，同时使用签名来表示唯一的方法，这里是sum(II)I。</p>
<p>指令执行<br>smali字节码是类似于汇编的，如果你有汇编基础，理解起来是非常容易的。<br>比如：<br>move v0, v3 把v3寄存器的值移动到寄存器v0上.<br>const v0， 0x1 把值0x1赋值到寄存器v0上。<br>invoke-static {v4, v5}, Lme&#x2F;isming&#x2F;myapplication&#x2F;MainActivity;-&gt;sum(II)I 执行方法sum(),v4,v5的值分别作为sum的参数</p>
<h3 id="条件跳转分支"><a href="#条件跳转分支" class="headerlink" title="条件跳转分支"></a>条件跳转分支</h3><p>“if-eq vA, vB, :cond_x”　—　如果vA等于vB则跳转到:cond_x</p>
<p>“if-ne vA, vB, :cond_x”　—　如果vA不等于vB则跳转到:cond_x</p>
<p>“if-lt vA, vB, :cond_x”　—　如果vA小于vB则跳转到:cond_x</p>
<p>“if-ge vA, vB, :cond_x”　—　如果vA大于等于vB则跳转到:cond_x</p>
<p>“if-gt vA, vB, :cond_x”　—　如果vA大于vB则跳转到:cond_x</p>
<p>“if-le vA, vB, :cond_x”　—　如果vA小于等于vB则跳转到:cond_x</p>
<p>“if-eqz vA, :cond_x”　—　如果vA等于0则跳转到:cond_x</p>
<p>“if-nez vA, :cond_x”　—　如果vA不等于0则跳转到:cond_x</p>
<p>“if-ltz vA, :cond_x”　—　如果vA小于0则跳转到:cond_x</p>
<p>“if-gez vA, :cond_x”　—　如果vA大于等于0则跳转到:cond_x</p>
<p>“if-gtz vA, :cond_x”　—　如果vA大于0则跳转到:cond_x</p>
<p>“if-lez vA, :cond_x”　—　如果vA小于等于0则跳转到:cond_x</p>
<p>常用修改技巧<br>const-string v0,”json数据”     &#x2F;&#x2F;写死抓包返回的vip信息的数据</p>
<p>goto :cond_x       &#x2F;&#x2F;无视后面的任何判断，直接跳转到校验成功后的代码段</p>
<p>return-void       &#x2F;&#x2F;如果方法是返回的void，直接在某个代码的后面加上，终止后面的代码的执行</p>
<p>const&#x2F;4 v0,0x1    &#x2F;&#x2F;对于判断，写死true 0x1或者false 0x0</p>
<p>某行代码前添加#，代表该行代码被注释掉，和删掉这行代码一样，但方便恢复</p>
<p>if-eq&#x2F;…          &#x2F;&#x2F;直接修改判断条件</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Android布局]]></title>
      <url>/2024/10/01/Android%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<h1 id="布局格式"><a href="#布局格式" class="headerlink" title="布局格式"></a>布局格式</h1><h2 id="线性布局LinearLayout"><a href="#线性布局LinearLayout" class="headerlink" title="线性布局LinearLayout"></a>线性布局LinearLayout</h2><p><code>线性布局（LinearLayout）</code>主要以水平或垂直方式来排列界面中的控件。并将控件排列到一条直线上。在线性布局中，如果水平排列，垂直方向上只能放一个控件，如果垂直排列，水平方向上也只能方一个控件。</p>
<p>使用线性布局，需要将布局节点改成<code>LinearLayout</code>，基本格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line"> ....</span><br><span class="line">    </span><br><span class="line">&lt;/LinearLayout&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="LinearLayout常用属性"><a href="#LinearLayout常用属性" class="headerlink" title="LinearLayout常用属性"></a>LinearLayout常用属性</h3><p>orientation</p>
<p>在线性布局中，控件排列有水平和垂直两个方向，控件排列方向由<code>android:orientation</code>属性来控制，该属性需要加在<code>LinearLayout</code>标记的属性中。将<code>orientation</code>属性值设置成为<code>horizontal</code>，控件将从水平方向<code>从左往右</code>排列，将<code>orientation</code>属性值设置成为<code>vertical</code>控件将从垂直方向<code>从上往下</code>排列。</p>
<p>gravity属性</p>
<p>线性布局的控件默认是<code>从左往右</code>排列或<code>从上往下</code>排列，如果想让线性布局中的控件排列对齐右边缘或者底部，可以用<code>gravity</code>属性控制。不过该属性值并不是只有在<code>LinearLayout</code>中才能使用，其他的布局用该属性同样能生效。</p>
<p>layout_weight属性</p>
<p>LinearLayout中另外一个常用的属性是<code>layout_weight</code>，该属性需要加在<code>LinearLayout</code>的子控件中。其作用是分配线性布局中的剩余空间到该控件上。</p>
<p>如下图所示，在控件没有添加<code>layout_weight</code>属性时，控件未占满线性布局的区域会空出来。</p>
<p>layout_margin属性</p>
<p>margIn属性设置当前控件与上级控件之间的间距，及子控件与父控件之间的距离，通常使用bp等单位标注具体间隔</p>
<p>padding属性</p>
<p>相应的，padding属性用于设置当前控件与同级控件之间的间距，用法与margin属性用法类似</p>
<h2 id="相对布局RelativeLayout"><a href="#相对布局RelativeLayout" class="headerlink" title="相对布局RelativeLayout"></a><strong>相对布局RelativeLayout</strong></h2><p>相对布局(重点)：相对布局是通过相对定位的方式让控件出现在布局任意位置； </p>
<p>在相对布局中如果不指定控件摆放的位置，那么控件都会被默认放在RelativeLayout的左上角。因此要先指定第一个控件的位置，再根据一个控件去给其他控件布局。</p>
<h3 id="RelativeLayout常见属性"><a href="#RelativeLayout常见属性" class="headerlink" title="RelativeLayout常见属性"></a>RelativeLayout常见属性</h3><p><strong>相对于父元素给控件布局</strong><br>  android:layout_centerHrizontal 水平居中<br>  android:layout_centerVertical 垂直居中<br>  android:layout_centerInparent  相对于父元素完全居中<br>  android:layout_alignParentBottom 位于父元素的下边缘<br>  android:layout_alignParentLeft  位于父元素的左边缘<br>  android:layout_alignParentRight 位于父元素的右边缘<br>  android:layout_alignParentTop  位于父元素的上边缘<br>  android:layout_alignWithParentIfMissing 如果对应的兄弟元素找不到的话就以父元素做参照物 </p>
<p><strong>属性值必须为id的引用名“@id&#x2F;id-name”</strong><br>  android:layout_below   位于元素的下方<br>  android:layout_above   位于元素的的上方<br>  android:layout_toLeftOf  位于元素的左边<br>  android:layout_toRightOf 位于元素的右边 </p>
<p>  android:layout_alignTop  该元素的上边缘和某元素的的上边缘对齐<br>  android:layout_alignLeft 该元素的左边缘和某元素的的左边缘对齐<br>  android:layout_alignBottom 该元素的下边缘和某元素的的下边缘对齐<br>  android:layout_alignRight 该元素的右边缘和某元素的的右边缘对齐 </p>
<p> <strong>给属性赋予像素值</strong><br>  android:layout_marginBottom   底边缘的距离<br>  android:layout_marginLeft      左边缘的距离<br>  android:layout_marginRight     右边缘的距离<br>  android:layout_marginTop      上边缘的距离</p>
<h2 id="网格布局GridLayout"><a href="#网格布局GridLayout" class="headerlink" title="网格布局GridLayout"></a>网格布局GridLayout</h2><p>设置多个网格形式的空间布局，一般以从左往右，从上到下的顺序按先后顺序放置控件</p>
<h3 id="GridLayout常用属性"><a href="#GridLayout常用属性" class="headerlink" title="GridLayout常用属性"></a>GridLayout常用属性</h3><p>​    <strong>rowCount ：行</strong></p>
<p>​     <strong>columnCount<em>：列</em></strong></p>
<p>设置该网格由几行几列构成</p>
<p>如都设置为2，则该布局为一个两行两列的网格，共可放置四个控件</p>
<p><strong>Space</strong>标签的作用：挡住控件，让其不超出网格的范围</p>
<p>​    <Space android:layout_width="wrap_content" 	    android:layout_height="wrap_content"/></p>
<p>可以防止控件长宽的跨界</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[android开发练习]]></title>
      <url>/2024/09/19/android%E5%BC%80%E5%8F%91%E7%BB%83%E4%B9%A0/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[android killer使用基础]]></title>
      <url>/2024/09/01/android-killer%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="AndroidKiller"><a href="#AndroidKiller" class="headerlink" title="AndroidKiller"></a>AndroidKiller</h1><p>AndroidKiller是一可视化的Android反编译工具，集合了多款安卓反编译软件，只要有配置jdk环境，AndroidKiller的安装十分常规</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="基础页面"><a href="#基础页面" class="headerlink" title="基础页面"></a>基础页面</h3><p><img src="/./assets/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE173831.png" alt="屏幕截图173831"></p>
<p>在左侧，工程信息位置，展示名称、包名、入口；右侧日志输出，展示</p>
<h3 id="更改apk的安装包名"><a href="#更改apk的安装包名" class="headerlink" title="更改apk的安装包名"></a>更改apk的安装包名</h3><p>下好一个apk安装包，这里选用土豆视频为例子</p>
<p>打开AndroidKiller.exe程序，把下好的apk包拉入程序中，程序会自动编译apk，中途出现分析工程提示不用管直接点击否，编译的结果如下</p>
<p>![屏幕截图 174312](.&#x2F;assets&#x2F;屏幕截图 174312-1725985509168-4.png)</p>
<p>修改apk安装包名重新编译，具体如下图所示，所有的操作都要等待控制台的提示再判断是否做下一步操作：</p>
<p>![屏幕截图 174641](.&#x2F;assets&#x2F;屏幕截图 174641-1725985520246-6.png)</p>
<p>把编译之后的apk安装包拉到模拟器上进行安装</p>
<p><img src="/./assets/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE174857-1725985526519-8.png" alt="屏幕截图174857"></p>
<h3 id="更换apk的图标"><a href="#更换apk的图标" class="headerlink" title="更换apk的图标"></a>更换apk的图标</h3><p>通过MANIFEST.MF全局搜索资源，找到图标</p>
<p><img src="/./assets/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE175148-1725985535489-10.png" alt="屏幕截图175148"></p>
<p>根据找到的所有图标路径（\AndroidKiller_v1.3.1\projects\土豆视频_v5.7_apkpure.com\Project\res），都替换成自己的图标（一个应用会拥有多个图标，这是因为一款APP在每个手机上的分辨率都是不同的，所以要多个图标来兼容手机的分辨率）</p>
<p>进行编译，并再次放入模拟器测试</p>
<h3 id="去除广告"><a href="#去除广告" class="headerlink" title="去除广告"></a>去除广告</h3><p>在apk项目中打开AnddroidManifest.xml配置清单文件（首先明确一个概念，广告都是通过网络加载出来的），删除跟网络有关的标签，如下所示常见的一些网络信息标签，最后一个INTERNET保留。</p>
<p><img src="/./assets/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE175608-1725985543584-12.png" alt="屏幕截图175608"></p>
<p>解决了弹框广告，接下来是首页广告，首页广告一般是app的入口是广告活动页面，只要改成当前活动页面就可以了，而拥有了以下的两个标签和属性值才会被识别为app入口页面</p>
<p><img src="/./assets/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE175723-1725985552720-14-1725985570323-16.png" alt="屏幕截图175723"></p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</span><br><span class="line">&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[apk文件结构]]></title>
      <url>/2024/08/29/apk%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h1 id="apk文件结构"><a href="#apk文件结构" class="headerlink" title="apk文件结构"></a>apk文件结构</h1><h2 id="APK-文件"><a href="#APK-文件" class="headerlink" title="APK 文件"></a>APK 文件</h2><p>APK (Android application package) ，是应用程序的压缩包形式，将应用程序的原代码、各类资源和清单信息组合在一起，以便在设备上进行安装和运行</p>
<p>接下以ibilibili安装包为例观察其文件结构</p>
<p>下载apk文件</p>
<p><img src="/./assets/1.png" alt="1"></p>
<p>因为其本质上就是一个 zip压缩包。所以直接用win解压解压文件</p>
<p><img src="/./apk%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/2.png" alt="2"></p>
<p>如图，文件内部可分为</p>
<ul>
<li>静态资源文件（assets）</li>
<li>库文件（lib）</li>
<li>签名文件（META-INF）</li>
<li>编译资源文件（res）</li>
<li>配置清单文件（AndroidManifest.xml）</li>
<li>核心代码文件（classes.dex）</li>
<li>资源映射文件（resources.arsc）</li>
</ul>
<h3 id="静态资源文件（assets）"><a href="#静态资源文件（assets）" class="headerlink" title="静态资源文件（assets）"></a>静态资源文件（assets）</h3><p>静态资源文件是一种未经编译的资源目录，它会被打包进 APK 文件中，在安装应用程序之后可以被访问，用于存放应用程序的原始静态文件，如音频文件、视频文件、HTML文件等</p>
<p><img src="/./apk%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/3.png" alt="3"></p>
<h3 id="库文件（lib）"><a href="#库文件（lib）" class="headerlink" title="库文件（lib）"></a>库文件（lib）</h3><p>用于存放动态及静态链接库的文件夹</p>
<h3 id="签名文件（META-INF）"><a href="#签名文件（META-INF）" class="headerlink" title="签名文件（META-INF）"></a>签名文件（META-INF）</h3><p>其中包含MANIFEST.MF、CERT.SF和CERT.RSA文件，MANIFEST.MF文件包含了文件的SHA1摘要值，CERT.SF和CERT.RSA文件为生成的签名文件和签名块文件，应用程序管理器安装apk文件的过程中会检查证书，对比每个文件的摘要值是否匹配，防止应用程序被篡改</p>
<h4 id="文件签名"><a href="#文件签名" class="headerlink" title="文件签名"></a>文件签名</h4><ul>
<li>加密：发送方利用接收方的公钥对要发送的明文进行加密。</li>
<li>解密：接收方利用自己的私钥对密文进行解密</li>
<li>配对：公钥和私钥配对的，用公钥加密的文件，只有对应的私钥才能解密。当然也可以反过来，用私钥加密，用对应的公钥进行解密</li>
<li>签名：签名是发送方为发送的文件写上一个自己的签名，所以需要使用的是自己（发送方）的私钥</li>
<li>验证签名： 验证签名是接收方需要确认自己接收到的密文文件是否真的是发送方发送过来的，需要确认的是中间有没有被篡改（不同于解密），验签最终是根据报文摘进行对比。</li>
</ul>
<h3 id="编译资源文件（res）"><a href="#编译资源文件（res）" class="headerlink" title="编译资源文件（res）"></a>编译资源文件（res）</h3><ul>
<li>res 是 APK文件中存放资源文件的目录，包含了应用程序使用的各种资源，如布局文件、图像文件、字符串资源等。</li>
<li>布局文件定义了应用程序界面的结构和组件的位置。</li>
<li>图像文件包含了应用程序使用的图标、背景图等图像资源。</li>
<li>字符串资源存储了应用程序中使用的文本字符串</li>
</ul>
<p><img src="/./apk%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/4.png" alt="4"></p>
<h3 id="配置清单文件（AndroidManifest-xml）"><a href="#配置清单文件（AndroidManifest-xml）" class="headerlink" title="配置清单文件（AndroidManifest.xml）"></a>配置清单文件（AndroidManifest.xml）</h3><p>每个应用程序都必须定义和包含的全局配置文件，它描述了应用程序的名称、版本、权限、引用的库文件等信息,其特殊点在于AndroidManifest.xml是经过压缩的，如果直接打开将看到乱码。可以通过相关工具将其解压。</p>
<h3 id="classes-dex"><a href="#classes-dex" class="headerlink" title="classes.dex"></a>classes.dex</h3><p>java编译产生class文件，class文件被DX工具转换成一个dex文件，以便在Dalvik虚拟机运行，classes.dex是Java源代码编译后生成的Dalvik虚拟机字节码文件，类似于Java虚拟机使用的．class类文件，将class文件整合到一起，可以减小类文件的尺寸、IO操作，提高类的查找速度，常规来说每个APK文件只有一个classes.dex文件，但一个dex文件储存空间有限（66535），超出的会创建一个新的class.dex文件</p>
<p><img src="/./apk%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/5.png" alt="5"></p>
<h3 id="资源映射文件（resources-arsc）"><a href="#资源映射文件（resources-arsc）" class="headerlink" title="资源映射文件（resources.arsc）"></a>资源映射文件（resources.arsc）</h3><p>一个二进制文件，包含了使用的所有资源索引信息</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[android中线程间通信]]></title>
      <url>/2024/08/01/android%E4%B8%AD%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<h1 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h1><p>Handle是一套 Android 消息传递机制,主要用于线程间通信</p>
<p>handler其实就是主线程在起了一个子线程，子线程运行并生成Message，Looper获取message并传递给Handler，Handler逐个获取子线程中的Message</p>
<p>Binder&#x2F;Socket用于进程间通信</p>
<ul>
<li>Message ：代表一个行为或者一串动作 每一个消息在加入消息队列时,都有明确的目标Handler</li>
<li>ThreadLocal： 线程本地存储区（Thread Local Storage，简称为TLS）ThreadLocal的作用是提供线程内的局部变量TLS,这种变量在线程的生命周期内起作用</li>
<li>MessageQueue  ：以队列的形式对外提供插入和删除的工作</li>
<li>Looper  ：Looper是循环的意思,它负责从消息队列中循环的取出消息然后把消息交给Handler处理</li>
<li>Handler ：消息的真正处理者, 具备获取消息、发送消息、处理消息、移除消息等功能</li>
</ul>
<h2 id="消息机制"><a href="#消息机制" class="headerlink" title="消息机制"></a>消息机制</h2><ul>
<li>以Handler的sendMessage方法为例，当发送一个消息后，会将此消息加入消息队列MessageQueue中。</li>
<li>Looper负责去遍历消息队列并且将队列中的消息分发给对应的Handler进行处理。</li>
<li>在Handler的handleMessage方法中处理该消息，这就完成了一个消息的发送和处理过程。</li>
</ul>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>创建 Handler</p>
<p>将 Handler 定义成静态的内部类</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">public class HandlerActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private Button bt_handler_send;</span><br><span class="line"></span><br><span class="line">    private static class MyHandler extends Handler &#123;</span><br><span class="line"></span><br><span class="line">        //弱引用持有HandlerActivity , GC 回收时会被回收掉</span><br><span class="line">        private WeakReference&lt;HandlerActivity&gt; weakReference;</span><br><span class="line"></span><br><span class="line">        public MyHandler(HandlerActivity activity) &#123;</span><br><span class="line">            this.weakReference = new WeakReference(activity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msg) &#123;</span><br><span class="line">            HandlerActivity activity = weakReference.get();</span><br><span class="line">            super.handleMessage(msg);</span><br><span class="line">            if (null != activity) &#123;</span><br><span class="line">                //执行业务逻辑</span><br><span class="line">            Toast.makeText(activity,&quot;handleMessage&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.HandlerActivity);</span><br><span class="line"></span><br><span class="line">        //创建 Handler</span><br><span class="line">        final MyHandler handler = new MyHandler(this);</span><br><span class="line"></span><br><span class="line">        bt_handler_send = findViewById(R.id.bt_handler_send);</span><br><span class="line">        bt_handler_send.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                new Thread(new Runnable() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void run() &#123;</span><br><span class="line">                        //使用 handler 发送空消息</span><br><span class="line">                        handler.sendEmptyMessage(0);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        //移除所有回调及消息</span><br><span class="line">        myHandler.removeCallbacksAndMessages(null);</span><br><span class="line">        super.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Message 获取</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Message message = myHandler.obtainMessage(); 		   //通过 Handler 实例获取</span><br><span class="line">Message message1 = Message.obtain();   			      //通过 Message 获取</span><br><span class="line">Message message2 = new Message();      				 //直接创建新的 Message 实例</span><br></pre></td></tr></table></figure>



<p>Handler 发送消息</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public final boolean post(Runnable r)</span><br><span class="line">&#123;</span><br><span class="line">   return  sendMessageDelayed(getPostMessage(r), 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">private static class MyHandler extends Handler &#123;</span><br><span class="line">        private final WeakReference&lt;MainActivity&gt; mTarget;</span><br><span class="line"></span><br><span class="line">        public MyHandler(MainActivity activity) &#123;</span><br><span class="line">            mTarget = new WeakReference&lt;MainActivity&gt;(activity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(@NonNull Message msg) &#123;</span><br><span class="line">            super.handleMessage(msg);</span><br><span class="line">            HandlerActivity activity = weakReference.get();</span><br><span class="line">            super.handleMessage(msg);</span><br><span class="line">            if (null != activity) &#123;</span><br><span class="line">                //执行业务逻辑</span><br><span class="line">                if (msg.what == 0) &#123;</span><br><span class="line">                	Log.e(&quot;myhandler&quot;, &quot;change textview&quot;);</span><br><span class="line">                	MainActivity ma = mTarget.get();</span><br><span class="line">	                ma.textView.setText(&quot;hahah&quot;);</span><br><span class="line">            	&#125;</span><br><span class="line">                Toast.makeText(activity,&quot;handleMessage&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[android读入sd卡]]></title>
      <url>/2024/07/29/android%E8%AF%BB%E5%85%A5sd%E5%8D%A1/</url>
      <content type="html"><![CDATA[<h1 id="sd卡的读写操作"><a href="#sd卡的读写操作" class="headerlink" title="sd卡的读写操作"></a>sd卡的读写操作</h1><h2 id="HttpURLConnection"><a href="#HttpURLConnection" class="headerlink" title="HttpURLConnection"></a>HttpURLConnection</h2><p>HttpURLConnection是基于[http协议的，支持GET、POST、PUT、DELETE等各种请求方式。如果使用HTTPS协议请求，可以使用它的子类HttpsURLConnection完成更安全的请求操作</p>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol>
<li><p>创建一个URL对象：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL url=new URL(“接口地址”)</span><br></pre></td></tr></table></figure>


</li>
<li><p>调用URL对象的openConnection()来获取HttpURLConnection对象实例；</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpURLConnection connection= (HttpURLConnection) url.openConnection();</span><br></pre></td></tr></table></figure>


</li>
<li><p>设置HTTP请求使用的方法：GET、POST或其他请求；</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.setRequestMethod(“GET”);</span><br></pre></td></tr></table></figure>


</li>
<li><p>设置连接超时，读取超时的毫秒数，以及服务器希望得到的一些消息头；</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">connection.setConnectTimeout(6*1000);</span><br><span class="line"></span><br><span class="line">connection.setReadTimeout(6 * 1000);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure>


</li>
<li><p>调用getInputStream()方法获得服务器返回的输入流，然后输入流进行读取了；</p>
<p>InputStream in &#x3D; connection.getInputStream();</p>
</li>
<li><p>最后调用disconnect()方法将HTTP连接关掉；</p>
<p>connection.disconnect();</p>
</li>
</ol>
<h3 id="使用参数"><a href="#使用参数" class="headerlink" title="使用参数"></a>使用参数</h3><p>setRequestProperty(key,value)【设置请求头】：设置一般请求属性。如果已存在具有该关键字的属性，则用新值改写其值。注：HTTP 要求所有能够合法拥有多个具有相同键的实例的请求属性，使用以逗号分隔的列表语法</p>
<p>addRequestProperty(key,value)【设置响应体】：添加由键值对指定的一般请求属性</p>
<p>getOutputStream【发送URL请求】：建立实际连接之后，就是发送请求，把请求参数传到服务器</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public void testDoGet()&#123;</span><br><span class="line">        String api=&quot;&quot;;</span><br><span class="line">        HttpURLConnection connection = null;</span><br><span class="line">        InputStream in=null;</span><br><span class="line">        BufferedReader reader=null;</span><br><span class="line">        try&#123;</span><br><span class="line">            //构造一个URL对象</span><br><span class="line">            URL url = new URL(api);</span><br><span class="line">            //获取URLConnection对象</span><br><span class="line">            connection= (HttpURLConnection) url.openConnection();</span><br><span class="line">            in = connection.getInputStream();</span><br><span class="line">            reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));</span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            String line = null;</span><br><span class="line">            //按行读取</span><br><span class="line">            while ((line = reader.readLine()) != null) &#123;</span><br><span class="line">                sb.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            String response= sb.toString();</span><br><span class="line">            System.out.println(response);</span><br><span class="line">        &#125;catch (Exception exception)&#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            if (connection != null) &#123;</span><br><span class="line">                connection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">            if (in != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (reader != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="AsyncTask异步操作"><a href="#AsyncTask异步操作" class="headerlink" title="AsyncTask异步操作"></a>AsyncTask异步操作</h2><p>AsyncTask&lt;Void, Void, Void&gt; 参数:</p>
<ul>
<li>异步任务开始时 , execute() 方法传入的参数类型 , 也是 doInBackground() 方法传入的参数类型 ;</li>
<li>异步任务执行时 , 进度值类型 , onProgressUpdate() 方法传入的参数类型 ;</li>
<li>异步任务结束时 , 结果类型 , onPostExecute() 方法传入参数类型 , 或 onCancelled() 方法参数</li>
</ul>
<h3 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>自定义 AsyncTask 异步任务</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package kim.hsl.aa;</span><br><span class="line"></span><br><span class="line">import android.os.AsyncTask;</span><br><span class="line">public class MyAsyncTask extends AsyncTask&lt;String, Integer, Boolean&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onPreExecute() &#123;</span><br><span class="line">        super.onPreExecute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected Boolean doInBackground(String... strings) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onProgressUpdate(Integer... values) &#123;</span><br><span class="line">        // 在 doInBackground 中调用了 publishProgress 方法, 就会回调该方法</span><br><span class="line">        super.onProgressUpdate(values);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCancelled() &#123;</span><br><span class="line">        super.onCancelled();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCancelled(Boolean aBoolean) &#123;</span><br><span class="line">        super.onCancelled(aBoolean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>调用异步任务</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private MyAsyncTask mMyAsyncTask;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        // 创建并执行异步任务</span><br><span class="line">        mMyAsyncTask = new MyAsyncTask();</span><br><span class="line">        mMyAsyncTask.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="sd卡的读写"><a href="#sd卡的读写" class="headerlink" title="sd卡的读写"></a>sd卡的读写</h2><p>在SD卡目录下创建文件</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">File file = new File(Environment.getExternalStorageDirectory(), &quot;mysdcard.txt&quot;);</span><br><span class="line">Log.d(TAG, &quot;file.exists():&quot; + file.exists() + &quot; file.getAbsolutePath():&quot;+ file.getAbsolutePath());</span><br><span class="line">if (file.exists()) &#123;</span><br><span class="line">    file.delete();</span><br><span class="line">    file.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line">// Toast.makeText(MainActivity.this, &quot;SD卡目录下创建文件成功...&quot;, Toast.LENGTH_LONG).show();</span><br><span class="line">Log.d(TAG, &quot;SD卡目录下创建文件成功...&quot;);</span><br></pre></td></tr></table></figure>



<p>在SD卡目录下的文件，写入内容</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FileWriter fw = new FileWriter(file);</span><br><span class="line">fw.write(&quot;我的sdcard内容.....&quot;);</span><br><span class="line">fw.close();</span><br><span class="line">// Toast.makeText(MainActivity.this, &quot;SD卡写入内容完成...&quot;,Toast.LENGTH_LONG).show();</span><br><span class="line">Log.d(TAG, &quot;SD卡写入内容完成...&quot;);</span><br></pre></td></tr></table></figure>



<p>读取SD卡文件里面的内容</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FileReader fr = new FileReader(&quot;/mnt/sdcard/mysdcard.txt&quot;);</span><br><span class="line">BufferedReader r = new BufferedReader(fr);</span><br><span class="line">String result = r.readLine();</span><br><span class="line">Log.d(TAG, &quot;SD卡文件里面的内容:&quot; + result);</span><br></pre></td></tr></table></figure>

]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[android的四大组件]]></title>
      <url>/2024/07/21/android%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h1><ol>
<li>活动（activity），用于表现功能</li>
<li>服务（service），后台运行服务，不提供界面呈现</li>
<li>广播接受者（Broadcast Receive），勇于接收广播</li>
<li>内容提供者（Content Provider），支持多个应用中存储和读取数据，相当于数据库</li>
</ol>
<h2 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h2><p>定义：是用户操作的可视化界面；它为用户提供了一个完成操作指令的窗口。当我们创建完毕Activity之后，需要调用setContentView()方法来完成界面的显示</p>
<p>一个Activity通常就是一个单独的屏幕</p>
<p>可以类比为windows开发中的窗口</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class FirstActivity extends AppCompatActivity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Button</span><br><span class="line">        android:id=&quot;@+id/button_1&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:text=&quot;Button 1&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="Actiity生命周期"><a href="#Actiity生命周期" class="headerlink" title="Actiity生命周期"></a>Actiity生命周期</h3><p> 在Android中会维持一个Activity Stack（Activity栈），当一个新的Activity创建时，它就会放到栈顶，这个Activity就处于运行状态。当再有一个新的Activity被创建后，会重新压人栈顶，而之前的Activity则会在这个新的Activity底下，就像枪梭压入子弹一样。而且之前的Activity就会进入后台</p>
<h3 id="四种状态"><a href="#四种状态" class="headerlink" title="四种状态"></a>四种状态</h3><ul>
<li>a.运行中(Running&#x2F;Active):这时Activity位于栈顶，可见可交互</li>
<li>b.暂停(Paused):可见不可交互。当一个新的非全屏的Activity或者一个透明的Activity放置在栈顶，Activity就处于暂停状态；这个时候Activity的各种数据还被保持着；只有在系统内存在极低的状态下，系统才会自动的去销毁Activity。</li>
<li>c.停止(Stoped):当一个Activity被另一个Activity完全覆盖，或者点击HOME键退入了后台，这时候Activity处于停止状态。这里有些是跟暂停状态相似的：这个时候Activity的各种数据还被保持着；当系统的别的地方需要用到内容时，系统会自动的去销毁Activity。</li>
<li>d.销毁(Detroyed):点击返回键或者系统在内存不够用的情况下就会把Activity从栈里移除销毁，被系统回收，这时候，Activity处于销毁状态。</li>
</ul>
<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>它通常用作在后台处理耗时的逻辑，与Activity一样，它存在自己的生命周期，也需要在AndroidManifest.xml配置相关信息</p>
<p>是Android中实现程序后台运行的解决方案，它非常适合去执行那些不需要和用户交互而且还要求长期运行的任务。服务的运行不依赖于任何用户界面，即使程序被切换到后台，或者用户打开了另外一个应用程序，服务仍然能够保持正常运行</p>
<p>不过需要注意的是，服务并不是运行在一个独立的进程当中的，而是依赖于创建服务时所在的应用程序进程</p>
<p>类似于c++中的窗口接口函数</p>
<h3 id="service用于在后台"><a href="#service用于在后台" class="headerlink" title="service用于在后台"></a>service用于在后台</h3><ul>
<li>started（启动）：当应用程序组件（如activity）调用startService()方法启动服务时，服务处于started状态。</li>
<li>bound（绑定）：当应用程序组件调用bindService()方法绑定到服务时，服务处于bound状态。</li>
</ul>
<h3 id="startService"><a href="#startService" class="headerlink" title="startService()"></a>startService()</h3><p>started service（启动服务）是由其他组件调用startService()方法启动的，其生命周期与启动它的组件无关，并且可以在后台无限期运行，即使启动服务的组件已经被销毁。因此，服务需要在完成任务后调用stopSelf()方法停止，或者由其他组件调用stopService()方法停止</p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class TestOneService extends Service&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        Log.i(&quot;Kathy&quot;,&quot;onCreate - Thread ID = &quot; + Thread.currentThread().getId());</span><br><span class="line">        super.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</span><br><span class="line">        Log.i(&quot;Kathy&quot;, &quot;onStartCommand - startId = &quot; + startId + &quot;, Thread ID = &quot; + Thread.currentThread().getId());</span><br><span class="line">        return super.onStartCommand(intent, flags, startId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        Log.i(&quot;Kathy&quot;, &quot;onBind - Thread ID = &quot; + Thread.currentThread().getId());</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroy() &#123;</span><br><span class="line">        Log.i(&quot;Kathy&quot;, &quot;onDestroy - Thread ID = &quot; + Thread.currentThread().getId());</span><br><span class="line">        super.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Log.i(&quot;Kathy&quot;, &quot;Thread ID = &quot; + Thread.currentThread().getId());</span><br><span class="line">        Log.i(&quot;Kathy&quot;, &quot;before StartService&quot;);</span><br><span class="line"></span><br><span class="line">        //连续启动Service</span><br><span class="line">        Intent intentOne = new Intent(this, TestOneService.class);</span><br><span class="line">        startService(intentOne);</span><br><span class="line">        Intent intentTwo = new Intent(this, TestOneService.class)</span><br><span class="line">        //停止Service</span><br><span class="line">        Intent intentFour = new Intent(this, TestOneService.class);</span><br><span class="line">        stopService(intentFour);</span><br><span class="line"></span><br><span class="line">        //再次启动Service</span><br><span class="line">        Intent intentFive = new Intent(this, TestOneService.class);</span><br><span class="line">        startService(intentFive);</span><br><span class="line"></span><br><span class="line">        Log.i(&quot;Kathy&quot;, &quot;after StartService&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="广播接受器"><a href="#广播接受器" class="headerlink" title="广播接受器"></a>广播接受器</h2><p>广播接收器是对发送出来的广播进行过滤接受并响应的一类组件。可以使用广播接收器来让应用对一个外部时间做出响应，广播接收器通过NotificationManager方法来通知用户这些事情发生了。广播接收器既可以在AndroidManifest.xml中注册，也可以在运行时的代码中使用</p>
<p>广播接收器没有用户界面。然而，它们可以启动一个activity或serice来响应它们收到的信息，或者用NotificationManager来通知用户。通知可以用很多种方式来吸引用户的注意力，例如闪动背灯、震动、播放声音等。一般来说是在状态栏上放一个持久的图标，用户可以打开它并获取消息。</p>
<p>注册有两种方法，分别是程序动态注册【在运行时的代码中使用Context.registerReceive（）进行注册】和AndroidManifest文件中进行静态注册</p>
<p>类似于windows中的消息接受处理函数</p>
<h3 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h3><p>创建一个广播接收器BroadcastReceiver ，广播也是通过Intent来传递数据。</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class MyReceiver extends BroadcastReceiver &#123;</span><br><span class="line">    private static final String TAG = &quot;MyReceiver&quot;;</span><br><span class="line">    @Override</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        String msg=intent.getStringExtra(&quot;msg&quot;);</span><br><span class="line">        Log.e(TAG, &quot;onReceive: &quot;+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>清单文件注册该广播</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.MyApplication&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	<span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">&quot;.receiver.MyReceiver&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在其它组件里面发送广播，比如Activity里面</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">private void Acitivity()&#123;</span><br><span class="line">	Intent intent = new Intent(this, MyReceiver.class);</span><br><span class="line">	sendBroadcast(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="内容提供器"><a href="#内容提供器" class="headerlink" title="内容提供器"></a>内容提供器</h2><p>给多个应用提供数据，例，APP A的数据库内容不可被APP B进行读取的，此时，一个内容提供者，可以将APP A中的数据信息提供给APP B</p>
<ul>
<li>获取通讯录中的<code>联系人</code>，申请好友。</li>
<li>获取其他软件<code>搜索记录</code>，大数据计算，进行产品推送。</li>
<li>预约直播，将<code>预约信息</code>写入手机备忘</li>
</ul>
<p>这一组件暂时不做过多记录</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[java输入输出]]></title>
      <url>/2024/07/18/java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
      <content type="html"><![CDATA[<h1 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h1><table>
<thead>
<tr>
<th></th>
<th>输入流</th>
<th>输出流</th>
</tr>
</thead>
<tbody><tr>
<td>字节流</td>
<td>InputStream</td>
<td>OutputStream</td>
</tr>
<tr>
<td>字符流</td>
<td>Reader</td>
<td><code>Writer</code></td>
</tr>
</tbody></table>
<h2 id="输入到控制台"><a href="#输入到控制台" class="headerlink" title="输入到控制台"></a>输入到控制台</h2><p>语法</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(msg);//输出一个字符串并换行</span><br><span class="line">        System.out.print(msg);//输出一个字符串不换行</span><br><span class="line">        System.out.printf(format,msg);//格式化输出</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>println输出的内容自带\n，print不带\n。</li>
<li>printf的格式化输出方式和C语言中的printf基本是一致的。</li>
</ul>
<p>类似c语言的占位输出符</p>
<table>
<thead>
<tr>
<th>转换符</th>
<th>类型</th>
<th>举例</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>d</td>
<td>十进制整数</td>
<td>（“%d”,100）</td>
<td>100</td>
</tr>
<tr>
<td>x</td>
<td>十六进制整数</td>
<td>（”%x“,100）</td>
<td>64</td>
</tr>
<tr>
<td>o</td>
<td>八进制整数</td>
<td>（”%o“,100）</td>
<td>144</td>
</tr>
<tr>
<td>f</td>
<td>定点浮点数</td>
<td>（”%f“,100f）</td>
<td>100.000000</td>
</tr>
<tr>
<td>e</td>
<td>指数浮点数</td>
<td>（”%e“,100f）</td>
<td>1.000000e+02</td>
</tr>
<tr>
<td>g</td>
<td>通用浮点数</td>
<td>（”%g“,100）</td>
<td>100.000</td>
</tr>
<tr>
<td>a</td>
<td>十六进制浮点数</td>
<td>（”%a“,100）</td>
<td>0x1.9p6</td>
</tr>
<tr>
<td>s</td>
<td>字符串</td>
<td>（”%s“,“100”）</td>
<td>100</td>
</tr>
<tr>
<td>c</td>
<td>字符</td>
<td>（”%c“,‘1’）</td>
<td>1</td>
</tr>
<tr>
<td>b</td>
<td>布尔值</td>
<td>（”%b“,100）</td>
<td>true</td>
</tr>
<tr>
<td>%</td>
<td>百分号</td>
<td>（”%。2f%%“,2&#x2F;7f）</td>
<td>0.29%</td>
</tr>
</tbody></table>
<h2 id="从键盘输入"><a href="#从键盘输入" class="headerlink" title="从键盘输入"></a>从键盘输入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;//导入util包</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">        int num = scanner.nextInt();//从键盘输入一个数字</span><br><span class="line">        System.out.println(num);//输出该数字</span><br><span class="line">        sc.close();//注意，要记得调用关闭方法</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="OutputStream与InputStream"><a href="#OutputStream与InputStream" class="headerlink" title="OutputStream与InputStream"></a>OutputStream与InputStream</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line"> </span><br><span class="line">public class InputStreamOutputStreamExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 创建一个文件输入流对象，用于读取文件内容</span><br><span class="line">            FileInputStream fis = new FileInputStream(&quot;input.txt&quot;);</span><br><span class="line"> </span><br><span class="line">            // 创建一个文件输出流对象，用于将数据写入文件</span><br><span class="line">            FileOutputStream fos = new FileOutputStream(&quot;output.txt&quot;);</span><br><span class="line">            byte[] buffer = new byte[1024];</span><br><span class="line">            int bytesRead;</span><br><span class="line">            while ((bytesRead = fis.read(buffer)) != -1) &#123;</span><br><span class="line">                fos.write(buffer, 0, bytesRead);</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">            fos.close();</span><br><span class="line"> </span><br><span class="line">            System.out.println(&quot;文件复制成功！&quot;);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="read方法"><a href="#read方法" class="headerlink" title="read方法"></a>read方法</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><p>从输入流中读取数据的下一个字节到程序内部中，返回值为字符的ASCII值，否则为-1</p>
<h3 id="read-byte-b"><a href="#read-byte-b" class="headerlink" title="read(byte [] b )"></a>read(byte [] b )</h3><p>从输入流中读取的一定数量字节数,并将它们存储到缓冲区数组b中，返回值为实际读取的字节数</p>
<h3 id="read-byte-b-int-off-int-len"><a href="#read-byte-b-int-off-int-len" class="headerlink" title="read( byte [] b , int off , int len)"></a>read( byte [] b , int off , int len)</h3><p>读取 len字节的数据从输入流到一个字节数组，返回实际读取的字节数</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.yiibai;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">public class InputStreamDemo &#123;</span><br><span class="line">   public static void main(String[] args) throws Exception &#123;</span><br><span class="line">      </span><br><span class="line">      InputStream is = null;</span><br><span class="line">      byte[] buffer=new byte[5];</span><br><span class="line">      char c;</span><br><span class="line">      try&#123;</span><br><span class="line">         // 文本内容为 ABCDE</span><br><span class="line">         is = new FileInputStream(&quot;C://test.txt&quot;);</span><br><span class="line">         // 这个2指的是数据偏移 不是流偏移</span><br><span class="line">         is.read(buffer, 2, 3);</span><br><span class="line">         // 循环字节数据</span><br><span class="line">         for(byte b:buffer)&#123;</span><br><span class="line">            if(b==0)</span><br><span class="line">               // 偏移了2个单位数组默认值为0,所以前面2个单位是没有的</span><br><span class="line">               c=&#x27;-&#x27;;</span><br><span class="line">            else</span><br><span class="line">               c=(char)b;</span><br><span class="line">            System.out.print(c);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;catch(Exception e)&#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;finally&#123;</span><br><span class="line">         if(is!=null)</span><br><span class="line">            is.close();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="write方法"><a href="#write方法" class="headerlink" title="write方法"></a>write方法</h2><ul>
<li><p>write(int c)：写入数字，利用 ASCII 码表 或者 Unicode 表转化</p>
</li>
<li><p>write(String str)：写入字符串</p>
</li>
<li><p>write(char[] cbuf)：写入字符数组</p>
</li>
<li><p>write(String str, int off, int len)：写入字符串的一部分</p>
</li>
<li><p>write(char[] cbuf,int off,int len)：写入字符数组的一部分</p>
</li>
</ul>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[java的多线程]]></title>
      <url>/2024/07/18/java%E7%9A%84%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="多线程概述"><a href="#多线程概述" class="headerlink" title="多线程概述"></a>多线程概述</h1><p>多线程是实现并发机制的一种有效手段。进程和线程一样，都是实现并发的一个基本单位。线程是比进程更小的执行单位，线程是在进程的基础上进行的进一步划分。所谓多线程是指一个进程在执行过程中可以产生多个线程，这些线程可以同时存在、同时运行，一个进程可能包含了多个同时执行的线程。</p>
<h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id="进程："><a href="#进程：" class="headerlink" title="进程："></a>进程：</h3><p>正在运行的应用程序：是指一个内存中运行的应用程序，每个进程都有一个独立的内存空间，即每个进程都有着自己的堆、栈等且是互不共享的。</p>
<h3 id="线程："><a href="#线程：" class="headerlink" title="线程："></a>线程：</h3><p>进程中的一个执行路径（一段程序从执行到结束的整个过程），共享一个内存空间，线程之间可以自由切换，并发执行，一个进程最少有一个线程<br>线程实际上是在进程的基础上进一步划分的，一个进程执行后，里面的若干执行路径又可以划分为若干个线程</p>
<h2 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h2><h3 id="分时调度"><a href="#分时调度" class="headerlink" title="分时调度"></a>分时调度</h3><p>所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间。</p>
<h3 id="抢占式调度"><a href="#抢占式调度" class="headerlink" title="抢占式调度"></a>抢占式调度</h3><ul>
<li>优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。</li>
<li>CPU使用抢占式调度模式在多个线程间进行着高速的切换。对于CPU的一个核心而言，某个时刻，只能执行一个线程，而 CPU的在多个线程间切换速度相对我们的感觉很快，看上去就是在同一时刻运行。 其实，多线程程序并不能提高程序的运行速度，但能够提高程序运行效率，让CPU的使用率更高。</li>
</ul>
<p><strong>并发</strong>：指两个或多个事件在同一个时间段内发生。</p>
<p><strong>并行</strong>：指两个或多个事件在同一时刻发生（同时发生）。</p>
<h2 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h2><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h3><ol>
<li>创建一个自定义类并继承Thread类；</li>
<li>重写run()方法，创建新的执行任务（通过thread对象的start()方法启动任务，一般不直接调用run()方法）</li>
<li>创建自定义类对象实例，调用start()，让线程执行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//MyThread.java</span><br><span class="line">public class MyThread extends Thread&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;			//run()方法就是线程要执行的任务的方法</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            System.out.println(&quot;MyThread&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//ThreadTest.java</span><br><span class="line">public class ThreadTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        MyThread mt = new MyThread();</span><br><span class="line">        mt.start();				//启动线程任务</span><br><span class="line">        for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">            System.out.println(&quot;MainThread&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[java异常抛出实例]]></title>
      <url>/2024/07/11/java%E5%BC%82%E5%B8%B8%E6%8A%9B%E5%87%BA%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>自定义异常</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class my_exception extends Exception &#123;</span><br><span class="line">    public void pick()&#123;</span><br><span class="line">    System.out.println(&quot;Error: 越界&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>抛出异常类及方法</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class pointjd &#123;</span><br><span class="line">    private int x=0;</span><br><span class="line">    public void move(char s)throws my_exception&#123;</span><br><span class="line">        if(s == &#x27;a&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            x-=1;</span><br><span class="line">            if(x&lt;=-5)</span><br><span class="line">                throw new my_exception();</span><br><span class="line">        &#125;</span><br><span class="line">        else if(s ==&#x27;d&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            x+=1;</span><br><span class="line">            if(x&gt;=5)</span><br><span class="line">                throw new my_exception();</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">            System.out.println(&quot;warning!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>主函数</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//TIP To &lt;b&gt;Run&lt;/b&gt; code, press &lt;shortcut actionId=&quot;Run&quot;/&gt; or</span><br><span class="line">// click the &lt;icon src=&quot;AllIcons.Actions.Execute&quot;/&gt; icon in the gutter.</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    pointjd p = new pointjd();</span><br><span class="line">    Scanner scanner = new Scanner(System.in);</span><br><span class="line">    for(int i= 0 ;i&lt;9;i++)&#123;</span><br><span class="line">            char mv;</span><br><span class="line">            String MV;</span><br><span class="line">            MV = scanner.next();</span><br><span class="line">            mv=MV.charAt(0);</span><br><span class="line">            try&#123;</span><br><span class="line">                p.move(mv);</span><br><span class="line">            &#125;</span><br><span class="line">            catch(my_exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                e.pick();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    System.out.println(&quot;over&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<ol>
<li><strong>创建自定义异常类</strong>：<ul>
<li>声明一个继承自Exception类或RuntimeException类的类。</li>
<li>根据需要添加构造方法和其他方法。例如，你可以添加一个带有错误消息的构造方法，以便在抛出异常时提供有关异常的详细信息。</li>
</ul>
</li>
<li><strong>在方法适当的位置生成自定义异常的实例，并用throw语句抛出</strong>：<ul>
<li>当你的代码遇到特定的错误情况时，你可以创建一个自定义异常类的实例，并使用throw语句将其抛出。这将导致程序的控制流跳转到最近的catch块（如果存在的话）。</li>
</ul>
</li>
<li><strong>在方法的声明部分用throws语句声明可能抛出的异常</strong>：<ul>
<li>如果你的方法可能会抛出异常（无论是自定义异常还是预定义异常），你都应该在方法的声明部分使用throws语句来声明它。这将告诉调用该方法的代码需要处理这个异常，或者它也可以继续向上抛出这个异常。</li>
</ul>
</li>
<li><strong>捕获和处理异常</strong>：<ul>
<li>在你的代码中，你可以使用try-catch块来捕获和处理异常。在try块中，你放置可能会抛出异常的代码。在catch块中，你处理这些异常。你可以根据异常的类型来决定如何处理它们。例如，如果你捕获到的是你的自定义异常，你可以根据异常中包含的信息来采取适当的行动。</li>
</ul>
</li>
</ol>
<h2 id="异常的解决方式"><a href="#异常的解决方式" class="headerlink" title="异常的解决方式"></a>异常的解决方式</h2><h3 id="异常声明throws"><a href="#异常声明throws" class="headerlink" title="异常声明throws"></a>异常声明throws</h3><p>​    当方法中抛出编译时异常，用户不想处理该异常，此时就可以借助throws将异常抛给方法的调用者来处理。即当前方法不处理异常，提醒方法的调用者处理异常。</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数列表) throws 异常类型1，异常类型2...&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public static void divide(int a, int b) throws ArithmeticException &#123;</span><br><span class="line">        if (b == 0) &#123;</span><br><span class="line">            throw new ArithmeticException(&quot;除数不能为0&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        int result = a / b;</span><br><span class="line">        System.out.println(&quot;结果：&quot; + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol>
<li><p>throws必须跟在方法的参数列表之后</p>
</li>
<li><p>声明的异常必须是 Exception 或者 Exception 的子类</p>
</li>
<li><p>方法内部如果抛出了多个异常，throws之后必须跟多个异常类型，之间用逗号隔开，如果抛出多个异常类型具有父子关系，直接声明父类即可。</p>
</li>
<li><p>调用声明抛出异常的方法时，调用者必须对该异常进行处理，或者继续使用throws抛出</p>
</li>
</ol>
<h3 id="try-catch-finally语句"><a href="#try-catch-finally语句" class="headerlink" title="try - catch - finally语句"></a>try - catch - finally语句</h3><p>异常可以通过try-catch-finally语句块来进行处理。由于throws对异常并没有真正处理，而是将异常报告给抛出异常方法的调用者，由调用者处理。如果真正要对异常进行处理，就需要try-catch</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    // 可能抛出异常的代码</span><br><span class="line">&#125; catch (ExceptionType1 e1) &#123;</span><br><span class="line">    // 处理异常类型1的情况</span><br><span class="line">&#125; catch (ExceptionType2 e2) &#123;</span><br><span class="line">    // 处理异常类型2的情况</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">    // 可选的finally语句块，用于执行清理操作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>finally语句块是可选的，用于执行清理操作，无论是否发生异常都会执行。finally语句块通常用于释放资源或执行必要的收尾工作，例如关闭文件或数据库连接。</p>
<ol>
<li>try块内抛出异常位置之后的代码将不会被执行</li>
<li>如果抛出异常类型与catch时异常类型不匹配，即异常不会被成功捕获，也就不会被处理，继续往外抛，直到JVM收到后中断程序—-异常是按照类型来捕获的**</li>
<li>try中可能会抛出多个不同的异常对象，则必须用多个catch来捕获—-即多种异常，多次捕获</li>
<li>如果多个异常的处理方式是完全相同，我们可以使用“ | ”隔开</li>
<li>如果异常之间具有父子关系，一定是子类异常在前catch，父类异常在后catch，否则语法错误</li>
</ol>
<h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><h3 id="检查性异常："><a href="#检查性异常：" class="headerlink" title="检查性异常："></a>检查性异常：</h3><p>最具代表的检查性异常是用户错误或问题引起的异常，这些异常在编译时强制要求程序员处理。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</p>
<h3 id="运行时异常（非检查性异常）："><a href="#运行时异常（非检查性异常）：" class="headerlink" title="运行时异常（非检查性异常）："></a>运行时异常（非检查性异常）：</h3><p>这些异常在编译时不强制要求处理，通常是由程序中的错误引起的，例如 NullPointerException、ArrayIndexOutOfBoundsException 等，这类异常可以选择处理，但并非强制要求</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
